name: Lint

on:
  workflow_call:

jobs:
  lint:
    runs-on: ubuntu-latest
    env:
      PIP_DISABLE_PIP_VERSION_CHECK: 1
      PIP_NO_CACHE_DIR: false
      PIP_USER: 1  # Make dependencies install into PYTHONUSERBASE.

      PIPENV_DONT_USE_PYENV: 1
      PIPENV_HIDE_EMOJIS: 1
      PIPENV_NOSPIN: 1

      PYTHONUSERBASE: ${{ github.workspace }}/.cache/py-user-base
      PRE_COMMIT_HOME: ${{ github.workspace }}/.cache/pre-commit-cache

    steps:
      - name: Add custom PYTHONUSERBASE to PATH
        run: echo '${{ env.PYTHONUSERBASE }}/bin/' >> $GITHUB_PATH

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        id: python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      - name: Python dependency cache
        uses: actions/cache@v2
        id: python_cache
        with:
          path: ${{ env.PYTHONUSERBASE }}
          key: "python-0-${{ runner.os }}-${{ env.PYTHONUSERBASE }}-\
          ${{ steps.python.outputs.python-version }}-\
          ${{ hashFiles('./Pipfile', './Pipfile.lock') }}"

      # Install dependencies if there was a cache miss.
      - name: Install Python dependencies
        if: steps.python_cache.outputs.cache-hit != 'true'
        run: >-
          pip install pipenv==2021.11.23
          && pipenv install --deploy --system --dev

      - name: Pre-commit environment cache
        uses: actions/cache@v2
        with:
          path: ${{ env.PRE_COMMIT_HOME }}
          key: "precommit-0-${{ runner.os }}-${{ env.PRE_COMMIT_HOME }}-\
          ${{ steps.python.outputs.python-version }}-\
          ${{ hashFiles('./.pre-commit-config.yaml') }}"

      # pre-commit's venv doesn't work with user installs.
      # Skip the flake8 hook because the following step will run it.
      - name: Run pre-commit hooks
        id: run-pre-commit-hooks
        run: PIP_USER=0 SKIP=flake8 pre-commit run --all-files

      # Show the log to debug failures.
      - name: Show pre-commit log
        if: always() && steps.run-pre-commit-hooks.outcome != 'success'
        run: cat "${PRE_COMMIT_HOME}/pre-commit.log"

      # Output linting errors in the format GitHub Actions recognises for
      # annotations.
      - name: Run flake8
        run: >-
          flake8 --format "::error
          file=%(path)s,line=%(row)d,col=%(col)d::[flake8] %(code)s: %(text)s"
